/** 
 *
 * Copyright (C) 2015 Data and Web Science Group, University of Mannheim, Germany (code@dwslab.de)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * 		http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package de.uni_mannheim.informatik.wdi.identityresolution.blocking;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

import de.uni_mannheim.informatik.wdi.model.DataSet;
import de.uni_mannheim.informatik.wdi.model.Matchable;
import de.uni_mannheim.informatik.wdi.model.Pair;
import de.uni_mannheim.informatik.wdi.model.Record;
import de.uni_mannheim.informatik.wdi.utils.ProgressReporter;

/**
 * Implementation of a simple {@link Blocker} based on blocking keys, where only
 * {@link Record}s with an equal blocking key (generated by the
 * {@link BlockingKeyGenerator}) are compared.
 * 
 * @author Oliver Lehmberg (oli@dwslab.de)
 * @author Robert Meusel (robert@dwslab.de)
 * 
 * @param <RecordType>
 */
public class StandardBlocker<RecordType extends Matchable> extends Blocker<RecordType> {

	private BlockingKeyGenerator<RecordType> blockingFunction;

	public StandardBlocker(BlockingKeyGenerator<RecordType> blockingFunction) {
		this.blockingFunction = blockingFunction;
	}

	@Override
	public List<Pair<RecordType, RecordType>> generatePairs(DataSet<RecordType> dataset1,
			DataSet<RecordType> dataset2) {
		// initialize blocking keys
		HashMap<String, List<RecordType>> blocks = new HashMap<>();

		for (RecordType record : dataset1.getRecords()) {
			String key = blockingFunction.getBlockingKey(record);

			List<RecordType> records = blocks.get(key);
			if (records == null) {
				records = new ArrayList<>();
				blocks.put(key, records);
			}
			records.add(record);
		}

		HashMap<String, List<RecordType>> blocks2 = new HashMap<>();

		for (RecordType record : dataset2.getRecords()) {
			String key = blockingFunction.getBlockingKey(record);

			List<RecordType> records = blocks2.get(key);
			if (records == null) {
				records = new ArrayList<>();
				blocks2.put(key, records);
			}
			records.add(record);
		}

		List<Pair<RecordType, RecordType>> result = new LinkedList<>();
		ProgressReporter reporter = new ProgressReporter(blocks.keySet().size(), "Calculating blocking pairs");
		for (String key1 : blocks.keySet()) {
			List<RecordType> block = blocks.get(key1);
			List<RecordType> block2 = blocks2.get(key1);

			if (block2 != null) {
				for (RecordType r1 : block) {
					for (RecordType r2 : block2) {
						result.add(new Pair<RecordType, RecordType>(r1, r2));
					}
				}
			}
			reporter.incrementProgress();
			reporter.report();
		}

		calculatePerformance(dataset1, dataset2, result);

		return result;
	}

	@Override
	public List<Pair<RecordType, RecordType>> generatePairs(DataSet<RecordType> dataset, boolean isSymmetric) {

		List<Pair<RecordType, RecordType>> result = new LinkedList<>();
		if (isSymmetric) {
			// initialize blocking keys
			HashMap<RecordType, String> blockingKeys = new HashMap<>();
			for (RecordType r1 : dataset.getRecords()) {
				blockingKeys.put(r1, blockingFunction.getBlockingKey(r1));
			}

			ArrayList<RecordType> datasetRecords = new ArrayList<RecordType>(dataset.getRecords());
			for (int i = 0; i < dataset.getSize() - 1; i++) {
				RecordType r1 = datasetRecords.get(i);
				String key1 = blockingKeys.get(r1);
				for (int j = i + 1; j < dataset.getSize(); j++) {
					RecordType r2 = datasetRecords.get(j);
					String key2 = blockingKeys.get(r2);
					if (r1 != r2 && key1.equals(key2)) {
						result.add(new Pair<RecordType, RecordType>(r1, r2));
					}
				}
			}
		} else {
			result = generatePairs(dataset, dataset);
		}

		calculatePerformance(dataset, dataset, result);

		return result;
	}
}
